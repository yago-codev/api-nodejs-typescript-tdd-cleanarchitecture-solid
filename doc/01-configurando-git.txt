01) Visualizando/Listando as configurações do Git:

    git config --list


02) Existem 3 níveis de configuração no Git:

    -> system: é a configuração do Git macroscópica,
    ou seja, são as configurações que estão na máquina como um todo.
    Vai servir para todos os projetos em que estivermos trabalhando. 

    -> global: são as configurações pessoais do usuário,
    aplicadas para qualquer projeto em que estejamos trabalhando.

    -> local: são as configurações locais,
    apenas para o projeto no qual estamos trabalhando no momento presente.


03) Criando configuração global para 
    definirmos o VSCode como sendo o editor dos arquivos do Git:

    git config --global core.editor code


04) Editando o arquivo de configurações globais do Git:

    git config --global --edit


05) Definindo a flag "--wait" para fazer com que 
    o VSCode aguarde o Git carregar todas as informações de configuração. 
    Essa flag vai evitar que a tela seja carregada em branco,
    pois aguarderemos a sincronização das informações:

    [user]
      name = yago-codev
      email = yagomilano92@gmail.com
    [core]
      editor = code --wait  # <---------------------


06) Criando os atalhos "alias" para 
    os comandos mais utilizados ao decorrer do desenvolvimento do projeto:

    [user]
      name = yago-codev
      email = yagomilano92@gmail.com
    [core]
      editor = code --wait
    [alias] #  <---------------
      s = !git status #  <---------------


07) Incluindo a flag "-s" dentro do atalho do comando "git status" para 
    fazermos com que as informações sobre o status fiquem resumidas:

    [user]
      name = yago-codev
      email = yagomilano92@gmail.com
    [core]
      editor = code --wait
    [alias]
      s = !git status -s  #  <---------------


08) Criando atalho para o "git add" e para o "git commit" em um único comando:

    [user]
      name = yago-codev
      email = yagomilano92@gmail.com
    [core]
      editor = code --wait
    [alias]
      s = !git status -s
      c = !git add --all && git commit -m # <===========


09) Criando atalho para o "git log":

    Criaremos uma formatação na forma como os logs são exibidos,
    passando alguns comandos de configuração para 
    resumir os logs, trazendo apenas as informações desejadas:

    %h = hash reduzida
    %d = branch/tag
    %s = mensagem do commit
    %cn = nome da pessoa que fez o commit
    %cr = data relativa em que o commit foi feito

    ...

    [user]
      name = yago-codev
      email = yagomilano92@gmail.com
    [core]
      editor = code --wait
    [alias]
      s = !git status -s
      c = !git add --all && git commit -m
      l = !git log --pretty=format:'%h %d%s - %cn, %cr' # <=============


10) Criando cores para personalizar as mensagens do comando "git log"

    [user]
      name = yago-codev
      email = yagomilano92@gmail.com
    [core]
      editor = code --wait
    [alias]
      s = !git status -s
      c = !git add --all && git commit -m
      l = !git log --pretty=format:'%C(blue)%h%C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr'

